<?xml version="1.0" encoding="UTF-8"?>

<project name="SVN" default="create_changelog" basedir=".">
	
	<import file="includes.xml" />
	
	<target name="create_changelog" depends="properties,clean_changelog">
		<echo message="-----------------------------------------------------" />
		<echo message="       SVN Changelog Created for Archive ${v.VERSION_REVLONG}" />
		<echo message="-----------------------------------------------------" />
	</target>
	
	<target name="get_base_revision">
		
		<!--  Execute SVN via command line to get Revision of Version.Properties file -->
		<exec executable="svn" output="svninfo.xml">
			<arg line="info files\Version.Properties --xml" />
		</exec>
		
		<!-- Read xml data and set property -->
		<xmlproperty file="svninfo.xml" collapseattributes="true" />
		<property name="svn.revision" value="${info.entry.commit.revision}" />
		
		<!-- Remove temporary file -->
		<delete file="svninfo.xml" />
		
	</target>
	
	<target name="pull_log" depends="get_base_revision">
		
		<property name="version.changelog" value="${src.dev}/buildfiles/changelogs/CHANGELOG-${v.VERSION_REVLONG}" />
		
		<!-- Execute SVN via command line to retrieve the log from the determined svn revision -->
		<exec executable="svn" output="${version.changelog}">
			<arg line="log ${src.dev} -r ${svn.revision}:HEAD" />
		</exec>
		
		<echo message="SVN:  log ${src.dev} -r ${svn.revision}:HEAD" />
		
	</target>
	
	<target name="clean_changelog" depends="pull_log">
		
		<property name="file.changelog" value="${dst.archive}/CHANGELOG" />
		
		<!-- Take log and clean it up -->
		<copy file="${version.changelog}" tofile="${file.changelog}">
			
			<filterchain>
				<tokenfilter>
					<filetokenizer />
					<replaceregex pattern="-{3,}+${line.separator}" replace="" flags="gs" />
				</tokenfilter>
			</filterchain>
			
			<filterchain>
				<tokenfilter>
					<ignoreblank />
				</tokenfilter>
			</filterchain>
			
			<filterchain>
				<tokenfilter>
					<filetokenizer />
					<replaceregex pattern="r[0-9]{1,}.+?lines?${line.separator}" replace="" flags="gs" />
				</tokenfilter>
			</filterchain>
			
			<filterchain>
				<tokenfilter>
					<ignoreblank />
				</tokenfilter>
			</filterchain>
			
			<filterchain>
				<tokenfilter>
					<filetokenizer />
					<replaceregex pattern="\*.+?${line.separator}" replace="" flags="gs" />
				</tokenfilter>
			</filterchain>
		</copy>
		
	</target>
	
</project> 