<?php

/* Bootstrap! */
require dirname( dirname( __DIR__ ) ) . DIRECTORY_SEPARATOR . 'bootstrap.php';


/**
 * Test class for DunCurl.
 * Generated by PHPUnit on 2013-10-13 at 09:32:30.
 */
class DunCurlTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var DunCurl
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
    	get_dunamis( 'dunamis' );
        $this->object = new DunCurl;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }
    
    
    /**
     * @covers DunCurl::getInstance
     */
    public function testGetInstance()
    {
    	$curl	=	DunCurl :: getInstance();
    	
    	$this->assertInstanceOf( 'DunCurl', $curl );
    	return $curl;
    }
    

    /**
     * @covers DunCurl::__call
     * @depends testGetInstance
     */
    public function testSetVariable( $curl )
    {
    	$curl->setTarget( 'value' );
    	$curl->setTest( 'test' );
    	$curl->setResponse( 'Hi there' );
    	
    	$this->assertAttributeContains( 'value', '_target', $curl );
    	$this->assertAttributeContains( 'test', '_test', $curl );
    	$this->assertAttributeContains( 'Hi there', 'response', $curl );
    	return $curl;
    }
    
    
    /**
     * @covers DunCurl::__call
     * @depends testSetVariable
     */
    public function testHasVariable( $curl )
    {
    	$value = $curl->hasTarget();
    	$this->assertTrue( $value, 'Unable to find target value' );
    
    	$value = $curl->hasTest();
    	$this->assertTrue( $value, 'Unable to find test value' );
    
    	$this->assertFalse( $curl->hasNothing(), 'object has a nothing property' );
    	return $curl;
    }
    
    
    /**
     * @covers DunCurl::__call
     * @depends testSetVariable
     */
    public function testGetVariable( $curl )
    {
    	$value = $curl->getTarget();
    	$this->assertTrue( $value == 'value' );
    
    	$value = $curl->getTest();
    	$this->assertTrue( $value == 'test' );
    	return $curl;
    }

    /**
     * @covers DunCurl::set_cookies
     * @depends testSetVariable
     */
    public function testSet_cookies( $curl )
    {
    	$curl->set_cookies( 'cookie=something&monster=gone' );
    	$options	=	$curl->getOptions();
    	$this->assertTrue( $options[CURLOPT_COOKIE] == 'cookie=something&monster=gone' );
    	
    	$curl->set_cookies( array( 'cookie' => 'something', 'monster' => 'goneagain' ) );
    	$options	=	$curl->getOptions();
    	$this->assertTrue( $options[CURLOPT_COOKIE] == 'cookie=something&monster=goneagain' );
    }

    /**
     * @covers DunCurl::has_errors
     * @depends testSetVariable
     */
    public function testHas_errors( $curl )
    {
    	$this->assertFalse( $curl->has_errors() );
    	$curl->setError_code( '404' );
    	$curl->setError_string( 'baderror' );
    	$this->assertTrue( $curl->has_errors() == 'baderror' );
    }

    /**
     * @covers DunCurl::http_header
     * @depends testSetVariable
     */
    public function testHttp_header( $curl )
    {
        $curl->http_header( 'Content', 'somevaluehere' );
        $hdrs	=	$curl->getHeaders();
        
        $this->assertTrue( is_array( $hdrs ) );
        $this->assertTrue( $hdrs[0] == 'Content: somevaluehere' );
        
        $curl->http_header( 'ContentTwo: is here' );
        $hdrs	=	$curl->getHeaders();
        
        $this->assertTrue( is_array( $hdrs ) );
        $this->assertTrue( $hdrs[0] == 'Content: somevaluehere' );
        $this->assertTrue( $hdrs[1] == 'ContentTwo: is here' );
    }

    /**
     * @covers DunCurl::http_method
     * @depends testSetVariable
     */
    public function testHttp_method( $curl )
    {
        $curl->http_method( 'posted' );
        $optns	=	$curl->getOptions();
        $this->assertTrue( $optns[CURLOPT_CUSTOMREQUEST] == 'POSTED' );
    }

    /**
     * @covers DunCurl::http_login
     * @depends testSetVariable
     */
    public function testHttp_login( $curl )
    {
        $curl->http_login( 'steven', 'password' );
        $optns	=	$curl->getOptions();
        $this->assertTrue( $optns[CURLOPT_HTTPAUTH] == CURLAUTH_ANY );
        $this->assertTrue( $optns[CURLOPT_USERPWD] == 'steven:password' );
    }

    /**
     * @covers DunCurl::proxy
     * @depends testSetVariable
     */
    public function testProxy( $curl )
    {
        $curl->proxy( 'http://www.jwhmcs.com', '8080' );
        $optns	=	$curl->getOptions();
        $this->assertTrue( $optns[CURLOPT_HTTPPROXYTUNNEL] );
        $this->assertTrue( $optns[CURLOPT_PROXY] == 'http://www.jwhmcs.com:8080' );
    }

    /**
     * @covers DunCurl::proxy_login
     * @depends testSetVariable
     */
    public function testProxy_login( $curl )
    {
        $curl->proxy_login( 'proxyname', 'proxypass' );
        $optns	=	$curl->getOptions();
        $this->assertTrue( $optns[CURLOPT_PROXYUSERPWD] == 'proxyname:proxypass' );
    }

    /**
     * @covers DunCurl::ssl
     */
    public function testSsl()
    {
    	$object	=	$this->object->ssl();
    	
        $this->assertInstanceOf( 'DunCurl', $object );
    }

    /**
     * @covers DunCurl::create
     */
	public function testCreate()
	{
		$object	=	$this->object->create( 'https://www.gohigheris.com' );
		
		$this->assertInstanceOf( 'DunCurl', $object );
		
		return $object;
	}
	
	
    /**
     * @covers DunCurl::options
     * @depends testCreate
     */
    public function testOptions( $object )
    {
    	$array	=	array( 'TIMEOUT' => '30', 'RETURNTRANSFER' => true );
    	$object	=	$object->options( $array );
    	
    	$this->assertInstanceOf( 'DunCurl', $object );
    }

    /**
     * @covers DunCurl::option
     * @depends testCreate
     */
    public function testOption( $object )
    {
    	$object	=	$object->option( 'TIMEOUT', '30' );
    	$this->assertInstanceOf( 'DunCurl', $object );
    }

    /**
     * @covers DunCurl::execute
     */
    public function testExecute()
    {
    	$curl	=	dunloader( 'curl', false, array( 'test' => 'something' ) );
    	
    	$curl->create( 'https://www.gohigheris.com' );
    	$result	=	$curl->execute();
    	
    	$this->assertTrue( is_string( $result ) );
    	$this->assertFalse( $curl->has_errors() );
    }

    /**
     * @covers DunCurl::is_enabled
     */
    public function testIs_enabled()
    {
    	$this->assertTrue( is_bool( $this->object->is_enabled() ) );
    }

    /**
     * @covers DunCurl::debug
     */
    public function testDebug()
    {
    	ob_start();
    	$this->object->debug();
    	$result	=	ob_get_contents();
    	ob_end_clean();
    	
    	$this->assertStringStartsWith( "=============================================", $result );
    }

    /**
     * @covers DunCurl::debug_request
     */
	public function testDebug_request()
	{
		$debug = $this->object->debug_request();
		$this->assertArrayHasKey( 'url', $debug );
	}
}
?>
