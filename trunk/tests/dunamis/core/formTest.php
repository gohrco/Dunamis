<?php

/* Bootstrap! */
require dirname( dirname( __DIR__ ) ) . DIRECTORY_SEPARATOR . 'bootstrap.php';


/**
 * Test class for DunForm.
 * Generated by PHPUnit on 2013-10-17 at 13:55:41.
 */
class DunFormTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var DunForm
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        get_dunamis();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }
	
    
	/**
	 * @covers DunForm::getInstance
	 */
	public function testGetInstance()
	{
		get_dunamis( 'dunamis' );
		$form	=	dunloader( 'form' );
		$this->assertTrue( $form !== null, 'Loader did not return an object' );
		$this->assertTrue( is_object( $form ) );
		$this->assertInstanceOf( 'DunForm', $form );
		return $form;
	}
	
	
	/**
	 * @covers DunForm::loadForm
	 * @depends testGetInstance
	 */
	public function testLoadForm( $form )
	{
		$fields	=	$form->loadForm( 'testform', 'dunamis' );
		$this->assertTrue( is_array( $fields ) );
		$this->assertTrue( ! empty( $fields ) );
		$this->assertArrayHasKey( 'template', $fields );
		return $fields;
	}
	
	
	/**
	 * @covers DunForm::addField
	 * @depends testGetInstance
	 */
	public function testAddField( $form )
	{
		$field	=	array(
				'order'	=> 100,
				'type' => 'text',
				'value' => null,
				'label' => 'dunamis.admin.form.group.label.name',
				'description' => 'dunamis.admin.form.group.desc.name',
		);
		
		$result	= $form->addField( 'test', $field, 'dunamis.testform' );
		$this->assertTrue( $result );
	}
	
	
	/**
	 * @covers DunForm::addField
	 * @depends testGetInstance
	 */
	public function testDeleteField( $form )
	{
		$result	= $form->deleteField( 'template', 'dunamis.testform' );
		$this->assertTrue( $result );
	}
	
	/**
	 * @covers DunForm::getButton
	 * @depends testGetInstance
	 */
	public function testGetButton( $form )
	{
		$button = $form->getButton();
		$this->assertTrue( is_string( $button ) );
		$this->assertContains( 'submit', $button );
	}

	/**
	 * @covers DunForm::getField
	 * @depends testGetInstance
	 */
	public function testGetField( $form )
	{
		$field = $form->getField( 'gid', 'dunamis.testform' );
		$this->assertTrue( is_object( $field ) );
		$this->assertInstanceOf( 'HiddenDunFields', $field );
	}
	
	
	/**
	 * @covers DunForm::setGroup
	 * @depends testGetInstance
	 */
	public function testSetGroup( $form )
	{
		$form->setGroup( 'test', 'dunamis.testform' );
		$field	=	$form->getField( 'gid', 'dunamis.testform' );
		$this->assertTrue( $field->get( 'group' ) == 'test' );
	}
	
	
	/**
	 * @covers DunForm::setItem
	 * @depends testGetInstance
	 */
	public function testSetItem( $form )
	{
		$form->setItem( 'gid', 'This is a test item description', 'dunamis.testform', 'description' );
		$field	=	$form->getField( 'gid', 'dunamis.testform' );
		$this->assertTrue( $field->get( '_description' ) == 'This is a test item description' );
	}
	
	
	/**
	 * @covers DunForm::setItems
	 * @depends testGetInstance
	 */
	public function testSetItems()
	{
		
	}
	
	
	/**
	 * @covers DunForm::setOption
	 * @depends testGetInstance
	 */
	public function testSetOption()
	{
		
	}
	
	
	/**
	 * @covers DunForm::setOptions
	 * @depends testGetInstance
	 */
	public function testSetOptions()
	{
		
	}
	
	
	/**
	 * @covers DunForm::setValue
	 * @depends testGetInstance
	 */
	public function testSetValue()
	{
		
	}
	
	
	/**
	 * @covers DunForm::setValues
	 * @depends testGetInstance
	 */
	public function testSetValues()
	{
		
	}
}
?>
