<?php



/**
 * Test class for DunLanguage.
 * Generated by PHPUnit on 2013-10-17 at 11:18:11.
 */
class DunLanguageTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var DunLanguage
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
    	get_dunamis( 'dunamis' );
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers DunLanguage::getInstance
     */
    public function testGetInstanceReturnsAnObject()
    {
    	$language	=	dunloader( 'language' );
    	$this->assertTrue( is_object( $language ), 'Loader did not return an object' );
    }
    
    
    /**
     * @covers DunLanguage::getInstance
     */
    public function testGetInstance()
    {
    	$language	=	dunloader( 'language' );
    	$this->assertInstanceOf( 'DunLanguage', $language );
    	return $language;
    }
    
    
    /**
     * @covers DunLanguage::setIdiom
     * @depends testGetInstance
     */
    public function testSetIdiom( $language )
    {
    	$language->setIdiom( 'Spanish' );
    	$this->assertAttributeContains( 'spanish', '_idiom', $language );
    	$language->setIdiom( 'English' );
    	return $language;
    }
    
    
	/**
	 * 
	 * @covers DunLanguage::appendTranslations
	 * @depends testGetInstance
	 */
    public function testAppendTranslations( $language )
    {
    	$language->appendTranslations( array( 'test.item' => 'This is a new translation' ), 'dunamis' );
    	$this->assertTrue( $language->translate( 'dunamis.test.item' ) == 'This is a new translation');
    }

	/**
	 * @covers DunLanguage::getIdiom
	 * @depends testSetIdiom
	 */
	public function testGetIdiom( $language )
	{
		$this->assertTrue( $language->getIdiom() == 'english' );
	}
	
	
	/**
	 * @covers DunLanguage::loadLanguage
	 */
	public function testLoadLanguage()
	{
		get_dunamis( 'dunamis' );
		$language	=	dunloader( 'language', true )->loadLanguage( 'dunamis' );
		$this->assertTrue( is_a( $language, 'DunLanguage' ) );
		return $language;
	}
	
	
	/**
	 * @covers DunLanguage::translate
	 * @depends testLoadLanguage
	 */
	public function testTranslate( $language )
	{
		$this->assertTrue( $language->translate( 'dunamis.addon.title' ) == 'Dunamis Framework' );
	}
}

